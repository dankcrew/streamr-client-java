package com.streamr.client.dataunion.contracts;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Bytes4;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 5.0.0.
 */
@SuppressWarnings("rawtypes")
public class HomeAMB extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50613a46806100206000396000f3006080604052600436106101a85763ffffffff60e060020a6000350416630ac1c31381146101ad5780630cbf0601146101d45780631812d996146101ec57806325fbf4ee1461027c578063392e53cd146102c95780633f0a9f65146102de5780633f768c06146102f35780633f9a8e7e1461034c578063437764df14610380578063467ad35a146103c7578063490a32c6146103e45780634a610b04146103fc578063630cea8e14610414578063669f618b1461044057806369ffa08a146104555780636ae1a9761461047c5780637698da24146104945780637bac29c7146104ac5780638d068043146104c45780638da5cb5b146104d95780638f4b4b98146104ee57806399439089146105065780639a454b991461051b5780639cb7595a146105305780639e307dff14610571578063acf5c68914610586578063bf1fe4201461059e578063cb08a10c146105b6578063d67bdd25146105ce578063dc8601b3146105e3578063e37c32891461064c578063e5789d0314610664578063e7a2c01f14610679578063f2fde38b14610699578063fe173b97146106ba578063ffd19e8c146106cf575b600080fd5b3480156101b957600080fd5b506101c26106e7565b60408051918252519081900360200190f35b3480156101e057600080fd5b506101c26004356106f7565b3480156101f857600080fd5b506102076004356024356107bc565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610241578181015183820152602001610229565b50505050905090810190601f16801561026e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028857600080fd5b506102b5600435602435600160a060020a03604435811690606435906084359060a4359060c43516610999565b604080519115158252519081900360200190f35b3480156102d557600080fd5b506102b5610cc3565b3480156102ea57600080fd5b506101c2610d14565b3480156102ff57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101c2943694929360249392840191908190840183828082843750949750610d629650505050505050565b34801561035857600080fd5b50610364600435610d7e565b60408051600160a060020a039092168252519081900360200190f35b34801561038c57600080fd5b50610395610e4d565b604080517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff199092168252519081900360200190f35b3480156103d357600080fd5b506103e2600435602435610e71565b005b3480156103f057600080fd5b50610207600435610e9b565b34801561040857600080fd5b50610364600435610ea6565b34801561042057600080fd5b506103e26024600480358281019290820135918135918201910135610f2a565b34801561044c57600080fd5b506101c2611356565b34801561046157600080fd5b506103e2600160a060020a03600435811690602435166113a4565b34801561048857600080fd5b506101c2600435611447565b3480156104a057600080fd5b506102b56004356114ca565b3480156104b857600080fd5b506103e2600435611593565b3480156104d057600080fd5b506101c26115fc565b3480156104e557600080fd5b50610364611674565b3480156104fa57600080fd5b506102b56004356116cb565b34801561051257600080fd5b5061036461174f565b34801561052757600080fd5b506101c26117a6565b34801561053c57600080fd5b506105456117f4565b6040805167ffffffffffffffff9485168152928416602084015292168183015290519081900360600190f35b34801561057d57600080fd5b506101c26117ff565b34801561059257600080fd5b506103e260043561184d565b3480156105aa57600080fd5b506103e26004356118fc565b3480156105c257600080fd5b506102b56004356119ab565b3480156105da57600080fd5b50610364611a2f565b3480156105ef57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101c2958335600160a060020a03169536956044949193909101919081908401838280828437509497505093359450611a869350505050565b34801561065857600080fd5b506101c2600435611bb7565b34801561067057600080fd5b506101c2611c3a565b34801561068557600080fd5b506103e26004803560248101910135611c88565b3480156106a557600080fd5b506103e2600160a060020a0360043516611f14565b3480156106c657600080fd5b506101c2611f51565b3480156106db57600080fd5b506102b5600435611f9f565b60006106f1611356565b90505b90565b60008060008360405160200180807f6e756d4d657373616765735369676e656400000000000000000000000000000081525060110182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b6020831061077b5780518252601f19909201916020918201910161075c565b51815160209384036101000a600019018019909216911617905260408051929094018290039091208652850195909552929092016000205495945050505050565b604080516020808201859052818301849052825180830384018152606092830193849052805192936000939192909182918401908083835b602083106108135780518252601f1990920191602091820191016107f4565b51815160209384036101000a6000190180199092169116179052604080519290940182900382207f7369676e6174757265730000000000000000000000000000000000000000000083830152602a80840182905285518085039091018152604a9093019485905282519097506003965060009550919392508291908401908083835b602083106108b45780518252601f199092019160209182019101610895565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000191681526020019081526020016000208054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561098b5780601f106109605761010080835404028352916020019161098b565b820191906000526020600020905b81548152906001019060200180831161096e57829003601f168201915b505050505091505092915050565b60408051600481526024810182526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f6fde8202000000000000000000000000000000000000000000000000000000001781529151815160009330939291829190808383895b83811015610a1a578181015183820152602001610a02565b50505050905090810190601f168015610a475780820380516001836020036101000a031916815260200191505b509150506000604051808303816000865af19150501580610ad9575030600160a060020a0316636fde82026040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610aa157600080fd5b505af1158015610ab5573d6000803e3d6000fd5b505050506040513d6020811015610acb57600080fd5b5051600160a060020a031633145b80610ae357503330145b1515610aee57600080fd5b610af6610cc3565b15610b0057600080fd5b610b0986611fc7565b1515610b1457600080fd5b60008411610b2157600080fd5b60008311610b2e57600080fd5b610b388888611fcf565b7fab54f3fbbe62c59b7876a9bf9bd5e0c22dbae93f4d8ee0438f7ce62b198eb0e0805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881617905560006020819052437fe66bef0282a446f9848e2903380099bb6e431483ee78778868f33b4a154c818b557f3d7fe2ee9790702383ef0118b516833ef2542132d3ca4ac6c77f62f1230fa6108690557ff7d5eefab3776d7f0450bd0193564bcb4f832ce313ff2836c450fc63a4b944198590557f916daedf6915000ff68ced2f0b6773fe6f2582237f92c3c95bb4d7940723007190527fd2ea0feb732edb0ffe32efd33a6b9d24d46b16eb34a4d07ce256537b6f131e42839055610c418261211f565b610c496121e1565b6040805184815290517f4fb76205cd57c896b21511d2114137d8e901b4ccd659e1a0f97d6306795264fb9181900360200190a16040805185815290517f52264b89e0fceafb26e79fd49ef8a366eb6297483bf4035b027f0c99a7ad512e9181900360200190a1610cb7610cc3565b98975050505050505050565b7f0a6f646cd611241d8073675e00d1a1ff700fbf1b53fcf473de56d1e6e4b714ba60005260046020527f078d888f9b66f3f8bfa10909e31f1e16240db73449f0500afdbbe3a70da457cc5460ff1690565b7f916daedf6915000ff68ced2f0b6773fe6f2582237f92c3c95bb4d7940723007160009081526020527fd2ea0feb732edb0ffe32efd33a6b9d24d46b16eb34a4d07ce256537b6f131e425490565b8051600090610d7890601063ffffffff61223816565b92915050565b6000600260008360405160200180807f6661696c65644d6573736167655265636569766572000000000000000000000081525060150182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b60208310610e035780518252601f199092019160209182019101610de4565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912086528501959095529290920160002054600160a060020a031695945050505050565b7f2544fbb90000000000000000000000000000000000000000000000000000000090565b610e79611674565b600160a060020a03163314610e8d57600080fd5b610e978282611fcf565b5050565b6060610d7882612261565b6000600260008360405160200180807f6661696c65644d65737361676553656e64657200000000000000000000000000815250601301826000191660001916815260200191505060405160208183030381529060405260405180828051906020019080838360208310610e035780518252601f199092019160209182019101610de4565b6000806000806000610f3a61174f565b600160a060020a031663facd743b336040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015610f9457600080fd5b505af1158015610fa8573d6000803e3d6000fd5b505050506040513d6020811015610fbe57600080fd5b50511515610fcb57600080fd5b61103589898080601f0160208091040260200160405190810160405280939291908181526020018383808284375050604080516020601f8f018190048102820181019092528d815294508d93508c9250829150840183828082843750600194506123c99350505050565b600160a060020a0316331461104957600080fd5b8686604051602001808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b6020831061109f5780518252601f199092019160209182019101611080565b51815160209384036101000a600019018019909216911617905260408051929094018290038220336c0100000000000000000000000002838301526034808401829052855180850390910181526054909301948590528251909b509195509293508392850191508083835b602083106111295780518252601f19909201916020918201910161110a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209350611161856106f7565b925061116c83611f9f565b1561117657600080fd5b60019283019283111561119b5761118c846116cb565b1561119657600080fd5b6111d5565b6111d58588888080601f0160208091040260200160405190810160405280939291908181526020018383808284375061246f945050505050565b6111e0846001612541565b846111f284600163ffffffff61261316565b604080516020808201949094528082019290925280518083038201815260609092019081905281519192909182918401908083835b602083106112465780518252601f199092019160209182019101611227565b51815160209384036101000a600019018019909216911617905260408051929094018290038220601f8f018290048202830182019094528d82529296506112a79450869350918d91508c908190840183828082843750612625945050505050565b6112b185846126a8565b60408051868152905133917fbf06885f40778f5ccfb64497d3f92ce568ddaedb7e2fb4487f72690418cf8e4c919081900360200190a26112ef6115fc565b905080831061134b5761130a856113058561276d565b6126a8565b604080513381526020810187905280820183905290517f415557404d88a0c0b8e3b16967cafffc511213fd9c465c16832ee17ed57d72379181900360600190a15b505050505050505050565b7fe34bb2103dc34f2c144cc216c132d6ffb55dac57575c22e089161bbe6508330460009081526020527f9f204e482014519ec310a8e752d4b19f9e9c5b073985c5f7fe150987771c9f0f5490565b30600160a060020a0316636fde82026040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156113e257600080fd5b505af11580156113f6573d6000803e3d6000fd5b505050506040513d602081101561140c57600080fd5b5051600160a060020a0316331461142257600080fd5b80600160a060020a038116151561143857600080fd5b6114428383612792565b505050565b60008060008360405160200180807f6e756d41666669726d6174696f6e735369676e6564000000000000000000000081525060150182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083836020831061077b5780518252601f19909201916020918201910161075c565b6000600460008360405160200180807f61666669726d6174696f6e735369676e6564000000000000000000000000000081525060120182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b6020831061154f5780518252601f199092019160209182019101611530565b51815160209384036101000a600019018019909216911617905260408051929094018290039091208652850195909552929092016000205460ff1695945050505050565b61159b611674565b600160a060020a031633146115af57600080fd5b7f2670ecc91ec356e32067fd27b36614132d727b84a1e03e08f412a4f2cf07597460009081526020527f3d7fe2ee9790702383ef0118b516833ef2542132d3ca4ac6c77f62f1230fa61055565b600061160661174f565b600160a060020a0316638d0680436040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561164357600080fd5b505af1158015611657573d6000803e3d6000fd5b505050506040513d602081101561166d57600080fd5b5051905090565b7f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060005260026020527fb7802e97e87ef2842a6cce7da7ffaeaedaa2f61a6a7870b23d9d01fc9b73712e54600160a060020a031690565b6000600460008360405160200180807f6d657373616765735369676e6564000000000000000000000000000000000000815250600e0182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083836020831061154f5780518252601f199092019160209182019101611530565b7f5a74bb7e202fb8e4bf311841c7d64ec19df195fee77d7e7ae749b27921b6ddfe60005260026020527fab54f3fbbe62c59b7876a9bf9bd5e0c22dbae93f4d8ee0438f7ce62b198eb0e054600160a060020a031690565b7fb120ceec05576ad0c710bc6e85f1768535e27554458f05dcbb5c65b8c7a749b060009081526020527fe66bef0282a446f9848e2903380099bb6e431483ee78778868f33b4a154c818b5490565b600560006001909192565b7f7f0fcd9e49860f055dd0c1682d635d309ecb5e3011654c716d9eb59a7ddec7d260009081526020527f79cf5d7509b8972cfd9e9247b5a44821920518657d3bdf01549a471d922830235490565b611855611674565b600160a060020a0316331461186957600080fd5b6000811161187657600080fd5b7f916daedf6915000ff68ced2f0b6773fe6f2582237f92c3c95bb4d79407230071600090815260209081527fd2ea0feb732edb0ffe32efd33a6b9d24d46b16eb34a4d07ce256537b6f131e428290556040805183815290517f4fb76205cd57c896b21511d2114137d8e901b4ccd659e1a0f97d6306795264fb929181900390910190a150565b611904611674565b600160a060020a0316331461191857600080fd5b6000811161192557600080fd5b7f55b3774520b5993024893d303890baa4e84b1244a43c60034d1ced2d3cf2b04b600090815260209081527ff7d5eefab3776d7f0450bd0193564bcb4f832ce313ff2836c450fc63a4b944198290556040805183815290517f52264b89e0fceafb26e79fd49ef8a366eb6297483bf4035b027f0c99a7ad512e929181900390910190a150565b6000600460008360405160200180807f6d65737361676543616c6c53746174757300000000000000000000000000000081525060110182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083836020831061154f5780518252601f199092019160209182019101611530565b7f7b58b2a669d8e0992eae9eaef641092c0f686fd31070e7236865557fa1571b5b60005260026020527f89d1797768793589e5608ebd54bdc3a99b59edcb38eb27eb2b8e05466743118c54600160a060020a031690565b60008060608082611a95611356565b14611a9f57600080fd5b611aa886610d62565b8510158015611abe5750611aba611c3a565b8511155b1515611ac957600080fd5b611ad387866127ba565b9150611ae8611ae0612956565b6001016129a4565b6020820151925081866040516020018083805190602001908083835b60208310611b235780518252601f199092019160209182019101611b04565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310611b6b5780518252601f199092019160209182019101611b4c565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040529050611bac83826129fb565b509095945050505050565b60008060008360405160200180807f6661696c65644d6573736167654461746148617368000000000000000000000081525060150182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083836020831061077b5780518252601f19909201916020918201910161075c565b7f2670ecc91ec356e32067fd27b36614132d727b84a1e03e08f412a4f2cf07597460009081526020527f3d7fe2ee9790702383ef0118b516833ef2542132d3ca4ac6c77f62f1230fa6105490565b6000806000611c9561174f565b600160a060020a031663facd743b336040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050602060405180830381600087803b158015611cef57600080fd5b505af1158015611d03573d6000803e3d6000fd5b505050506040513d6020811015611d1957600080fd5b50511515611d2657600080fd5b8484604051602001808383808284378201915050925050506040516020818303038152906040526040518082805190602001908083835b60208310611d7c5780518252601f199092019160209182019101611d5d565b51815160209384036101000a600019018019909216911617905260408051929094018290038220336c01000000000000000000000000028383015260348084018290528551808503909101815260549093019485905282519099509195509293508392850191508083835b60208310611e065780518252601f199092019160209182019101611de7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150611e3e826114ca565b15611e4857600080fd5b611e53826001612a98565b611e5c83611447565b9050611e6781611f9f565b15611e7157600080fd5b600101611e7e8382612b1b565b60408051848152905133917f5df9cc3eb93d8a9a481857a3b70a8ca966e6b80b25cf0ee2cce180ec5afa80a1919081900360200190a2611ebc6115fc565b8110611f0d57611ed483611ecf8361276d565b612b1b565b611f0d85858080601f01602080910402602001604051908101604052809392919081815260200183838082843750612b9d945050505050565b5050505050565b611f1c611674565b600160a060020a03163314611f3057600080fd5b600160a060020a0381161515611f4557600080fd5b611f4e8161211f565b50565b7f55b3774520b5993024893d303890baa4e84b1244a43c60034d1ced2d3cf2b04b60009081526020527ff7d5eefab3776d7f0450bd0193564bcb4f832ce313ff2836c450fc63a4b944195490565b7f80000000000000000000000000000000000000000000000000000000000000009081161490565b6000903b1190565b600080600080600086118015611fe55750600085115b1515611ff057600080fd5b85851415611ffd57600080fd5b506000925082915060ff905060015b831580612017575082155b1561205f578315801561202b575085828716145b15612034578093505b82158015612043575084828616145b1561204c578092505b6101009190910260ff179060010161200c565b5050600060208190527ff6c66672b1a9fe5622677597b0da8fd180a2c85696efbcf7fe4b1e0f4f0f6108949094557f2f30286a16f86ee067618e1a246990e40c07b7749418a6dd3133f9cfb7e814cc919091557f242329173dfc316001df0a0c3d5a8f58a7ffb1a8b7d99c268303b9a741bacdf9919091557ffb792ae4ad11102b93f26a51b3749c2b3667f8b561566a4806d49896928115949091527f7b62b32ff48350e85ce95b571fde6f8b1096bc44a26db769ad6d0b3a26bf1c6d55565b7f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0612148611674565b60408051600160a060020a03928316815291841660208301528051918290030190a17f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060005260026020527fb7802e97e87ef2842a6cce7da7ffaeaedaa2f61a6a7870b23d9d01fc9b73712e805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b7f0a6f646cd611241d8073675e00d1a1ff700fbf1b53fcf473de56d1e6e4b714ba60005260046020527f078d888f9b66f3f8bfa10909e31f1e16240db73449f0500afdbbe3a70da457cc805460ff19166001179055565b600082151561224957506000610d78565b5081810281838281151561225957fe5b0414610d7857fe5b6060600360008360405160200180807f6d6573736167657300000000000000000000000000000000000000000000000081525060080182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083106122e65780518252601f1990920191602091820191016122c7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019166000191681526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123bd5780601f10612392576101008083540402835291602001916123bd565b820191906000526020600020905b8154815290600101906020018083116123a057829003601f168201915b50505050509050919050565b600080600080865160411415156123df57600080fd5b50505060208401516040850151606086015160016123fd8787612c18565b60408051600080825260208083018085529490945260ff60f860020a870416828401526060820188905260808201879052915160a08083019493601f198301938390039091019190865af1158015612459573d6000803e3d6000fd5b5050604051601f19015198975050505050505050565b80600360008460405160200180807f6d6573736167657300000000000000000000000000000000000000000000000081525060080182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083106124f35780518252601f1990920191602091820191016124d4565b51815160001960209485036101000a01908116901991909116179052604080519490920184900390932086528583019690965250929093016000208451611442959194509201919050613937565b80600460008460405160200180807f6d657373616765735369676e6564000000000000000000000000000000000000815250600e0182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083106125c55780518252601f1990920191602091820191016125a6565b51815160209384036101000a60001901801990921691161790526040805192909401829003909120865285019590955292909201600020805460ff1916941515949094179093555050505050565b60008282111561261f57fe5b50900390565b80600360008460405160200180807f7369676e61747572657300000000000000000000000000000000000000000000815250600a018260001916600019168152602001915050604051602081830303815290604052604051808280519060200190808383602083106124f35780518252601f1990920191602091820191016124d4565b806000808460405160200180807f6e756d4d657373616765735369676e656400000000000000000000000000000081525060110182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b6020831061272b5780518252601f19909201916020918201910161270c565b51815160209384036101000a60001901801990921691161790526040805192909401829003909120865285019590955292909201600020939093555050505050565b7f80000000000000000000000000000000000000000000000000000000000000001790565b600160a060020a03821615156127b0576127ab81612e32565b610e97565b610e978282612e3e565b606060008060008060008060006127cf612ee2565b96506127d9612f30565b95506127e3612f7e565b94506127ed612fcc565b93507e050000000000000000000000000000000000000000000000000000000000009250612819612956565b6040805160208082018b90526c0100000000000000000000000030028284015282516034818403018152605490920192839052815167ffffffffffffffff949094169550909282918401908083835b602083106128875780518252601f199092019160209182019101612868565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390207bffffffffffffffffffffffffffffffffffffffff00000000000000006001021690508386604f01016040519080825280601f01601f19166020018201604052801561290a578160200160208202803883390190505b5097508751880185815287858203526000604f8a015284604e8a015286604d8a015289604c8a01528a60488a01523360348a0152828217841760208a0152505050505050505092915050565b7f7ab1577440dd7bedf920cb6de2f9fc6bf7ba98c78c85a3fa1f8311aac95e175960009081526020527fa9b0f75b23e377b9b22d27feaca5d8a12329c0049ebce1dc695b905f3aa4cd005490565b7f7ab1577440dd7bedf920cb6de2f9fc6bf7ba98c78c85a3fa1f8311aac95e1759600090815260205267ffffffffffffffff167fa9b0f75b23e377b9b22d27feaca5d8a12329c0049ebce1dc695b905f3aa4cd0055565b604080516020808252835181830152835185937f520d2afde79cbd5db58755ac9480f81bc658e5c517fcae7365a3d832590b01839386939092839283019185019080838360005b83811015612a5a578181015183820152602001612a42565b50505050905090810190601f168015612a875780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b80600460008460405160200180807f61666669726d6174696f6e735369676e656400000000000000000000000000008152506012018260001916600019168152602001915050604051602081830303815290604052604051808280519060200190808383602083106125c55780518252601f1990920191602091820191016125a6565b806000808460405160200180807f6e756d41666669726d6174696f6e735369676e6564000000000000000000000081525060150182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083836020831061272b5780518252601f19909201916020918201910161270c565b6000806000806000612bad6139b5565b60006060612bba8961301a565b969e50949c50929a509098509650945092509050612bd788613185565b1515612be257600080fd5b6020830151612bf0906131cb565b1515612bfb57600080fd5b61134b87878a63ffffffff891688878960006020020151886131dd565b60408051808201909152601a81527f19457468657265756d205369676e6564204d6573736167653a0a000000000000602082015260009060608315612dbe5781612c62865161322a565b866040516020018084805190602001908083835b60208310612c955780518252601f199092019160209182019101612c76565b51815160209384036101000a600019018019909216911617905286519190930192860191508083835b60208310612cdd5780518252601f199092019160209182019101612cbe565b51815160209384036101000a600019018019909216911617905285519190930192850191508083835b60208310612d255780518252601f199092019160209182019101612d06565b6001836020036101000a03801982511681845116808217855250505050505090500193505050506040516020818303038152906040526040518082805190602001908083835b60208310612d8a5780518252601f199092019160209182019101612d6b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209250612e2a565b6040805190810160405280600381526020017f3130340000000000000000000000000000000000000000000000000000000000815250905081818660405160200180848051906020019080838360208310612c955780518252601f199092019160209182019101612c76565b505092915050565b3031610e978282613335565b604080517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015290518391600091600160a060020a038416916370a0823191602480830192602092919082900301818787803b158015612ea357600080fd5b505af1158015612eb7573d6000803e3d6000fd5b505050506040513d6020811015612ecd57600080fd5b50519050612edc848483613396565b50505050565b7f67d6f42a1ed69c62022f2d160ddc6f2f0acd37ad1db0c24f4702d7d3343a4add60009081526020527ff6c66672b1a9fe5622677597b0da8fd180a2c85696efbcf7fe4b1e0f4f0f61085490565b7fe504ae1fd6471eea80f18b8532a61a9bb91fba4f5b837f80a1cfb6752350af4460009081526020527f2f30286a16f86ee067618e1a246990e40c07b7749418a6dd3133f9cfb7e814cc5490565b7fbbd454018e72a3f6c02bbd785bacc49e46292744f3f6761276723823aa33232060009081526020527f242329173dfc316001df0a0c3d5a8f58a7ffb1a8b7d99c268303b9a741bacdf95490565b7ffb792ae4ad11102b93f26a51b3749c2b3667f8b561566a4806d498969281159460009081526020527f7b62b32ff48350e85ce95b571fde6f8b1096bc44a26db769ad6d0b3a26bf1c6d5490565b600080600080600061302a6139b5565b60006060600080604f915060208b01519950600160a060020a0360348c015116985060548b01518060601c985063ffffffff8160401c1697508060181a7fff000000000000000000000000000000000000000000000000000000000000008260d01b16975087600081146130cf5760f860020a81146130d8577f020000000000000000000000000000000000000000000000000000000000000081146130ea576130f5565b600096506130f5565b606f8e015196506020850194506130f5565b600096506001850194505b506001808260031b1b03818501945080858f01511688528260191a91506001808360031b1b039050818501945080858f0151166020890152848e51039350505050806040519080825280601f01601f191660200182016040528015613164578160200160208202803883390190505b50925060248201915080826004350160208501375050919395975091939597565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167e0500000000000000000000000000000000000000000000000000000000000014919050565b60006131d5612ee2565b909114919050565b60006131ed898984898b8861344d565b90506131f98782613511565b80151561321e5761320a8783613594565b6132148789613661565b61321e878a61374f565b61134b898989846137d2565b606060008082818515156132735760408051808201909152600181527f30000000000000000000000000000000000000000000000000000000000000006020820152945061332c565b8593505b831561328e57600190920191600a84049350613277565b826040519080825280601f01601f1916602001820160405280156132bc578160200160208202803883390190505b5091505060001982015b851561332857815160001982019160f860020a6030600a8a0601029184919081106132ed57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a860495506132c6565b8194505b50505050919050565b604051600160a060020a0383169082156108fc029083906000818181858888f193505050501515610e9757808261336a6139d0565b600160a060020a039091168152604051908190036020019082f080158015611f0d573d6000803e3d6000fd5b60408051600160a060020a03841660248201526044808201849052825180830390910181526064909101909152602081810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781528251606093600093909290918491828a5af160005193508392508080156101a85750506000835111156134455781151561344557600080fd5b505050505050565b60008061345988613820565b61346284613897565b61346b836138e4565b5086600160a060020a0316858760405180828051906020019080838360005b838110156134a257818101518382015260200161348a565b50505050905090810190601f1680156134cf5780820380516001836020036101000a031916815260200191505b5091505060006040518083038160008787f19250505090506134f16000613820565b6134fb6000613897565b61350560006138e4565b50979650505050505050565b80600460008460405160200180807f6d65737361676543616c6c5374617475730000000000000000000000000000008152506011018260001916600019168152602001915050604051602081830303815290604052604051808280519060200190808383602083106125c55780518252601f1990920191602091820191016125a6565b806040518082805190602001908083835b602083106135c45780518252601f1990920191602091820191016135a5565b51815160001960209485036101000a01908116901991909116179052604080519490920184900384207f6661696c65644d657373616765446174614861736800000000000000000000008583015260358086018a9052835180870390910181526055909501928390528451909650600095508594935082918401908083836020831061272b5780518252601f19909201916020918201910161270c565b80600260008460405160200180807f6661696c65644d6573736167655265636569766572000000000000000000000081525060150182600019166000191681526020019150506040516020818303038152906040526040518082805190602001908083835b602083106136e55780518252601f1990920191602091820191016136c6565b51815160209384036101000a60001901801990921691161790526040805192909401829003909120865285019590955292909201600020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0395909516949094179093555050505050565b80600260008460405160200180807f6661696c65644d65737361676553656e646572000000000000000000000000008152506013018260001916600019168152602001915050604051602081830303815290604052604051808280519060200190808383602083106136e55780518252601f1990920191602091820191016136c6565b60408051821515815290518391600160a060020a0380871692908816917fe194ef610f9150a2db4110b3db5116fd623175dca3528d7ae7046a1042f84fe7919081900360200190a450505050565b7f7b58b2a669d8e0992eae9eaef641092c0f686fd31070e7236865557fa1571b5b60005260026020527f89d1797768793589e5608ebd54bdc3a99b59edcb38eb27eb2b8e05466743118c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b7fe34bb2103dc34f2c144cc216c132d6ffb55dac57575c22e089161bbe6508330460009081526020527f9f204e482014519ec310a8e752d4b19f9e9c5b073985c5f7fe150987771c9f0f55565b7f7f0fcd9e49860f055dd0c1682d635d309ecb5e3011654c716d9eb59a7ddec7d2600090815260208190527f79cf5d7509b8972cfd9e9247b5a44821920518657d3bdf01549a471d922830239190915590565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061397857805160ff19168380011785556139a5565b828001600101855582156139a5579182015b828111156139a557825182559160200191906001019061398a565b506139b19291506139df565b5090565b60408051808201825290600290829080388339509192915050565b6040516021806139fa83390190565b6106f491905b808211156139b157600081556001016139e55600608060405260405160208060218339810160405251600160a060020a038116ff00a165627a7a723058203e7618d82f8fb08f1b11912f3f1340bdea1074714d93c691b49baca54fd56ebc0029";

    public static final String FUNC_TRANSACTIONHASH = "transactionHash";

    public static final String FUNC_NUMMESSAGESSIGNED = "numMessagesSigned";

    public static final String FUNC_SIGNATURE = "signature";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISINITIALIZED = "isInitialized";

    public static final String FUNC_REQUIREDBLOCKCONFIRMATIONS = "requiredBlockConfirmations";

    public static final String FUNC_GETMINIMUMGASUSAGE = "getMinimumGasUsage";

    public static final String FUNC_FAILEDMESSAGERECEIVER = "failedMessageReceiver";

    public static final String FUNC_GETBRIDGEMODE = "getBridgeMode";

    public static final String FUNC_SETCHAINIDS = "setChainIds";

    public static final String FUNC_MESSAGE = "message";

    public static final String FUNC_FAILEDMESSAGESENDER = "failedMessageSender";

    public static final String FUNC_SUBMITSIGNATURE = "submitSignature";

    public static final String FUNC_MESSAGEID = "messageId";

    public static final String FUNC_CLAIMTOKENS = "claimTokens";

    public static final String FUNC_NUMAFFIRMATIONSSIGNED = "numAffirmationsSigned";

    public static final String FUNC_AFFIRMATIONSSIGNED = "affirmationsSigned";

    public static final String FUNC_SETMAXGASPERTX = "setMaxGasPerTx";

    public static final String FUNC_REQUIREDSIGNATURES = "requiredSignatures";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_MESSAGESSIGNED = "messagesSigned";

    public static final String FUNC_VALIDATORCONTRACT = "validatorContract";

    public static final String FUNC_DEPLOYEDATBLOCK = "deployedAtBlock";

    public static final String FUNC_GETBRIDGEINTERFACESVERSION = "getBridgeInterfacesVersion";

    public static final String FUNC_MESSAGESOURCECHAINID = "messageSourceChainId";

    public static final String FUNC_SETREQUIREDBLOCKCONFIRMATIONS = "setRequiredBlockConfirmations";

    public static final String FUNC_SETGASPRICE = "setGasPrice";

    public static final String FUNC_MESSAGECALLSTATUS = "messageCallStatus";

    public static final String FUNC_MESSAGESENDER = "messageSender";

    public static final String FUNC_REQUIRETOPASSMESSAGE = "requireToPassMessage";

    public static final String FUNC_FAILEDMESSAGEDATAHASH = "failedMessageDataHash";

    public static final String FUNC_MAXGASPERTX = "maxGasPerTx";

    public static final String FUNC_EXECUTEAFFIRMATION = "executeAffirmation";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GASPRICE = "gasPrice";

    public static final String FUNC_ISALREADYPROCESSED = "isAlreadyProcessed";

    public static final Event USERREQUESTFORSIGNATURE_EVENT = new Event("UserRequestForSignature", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<DynamicBytes>() {}));
    ;

    public static final Event AFFIRMATIONCOMPLETED_EVENT = new Event("AffirmationCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bool>() {}));
    ;

    public static final Event SIGNEDFORUSERREQUEST_EVENT = new Event("SignedForUserRequest", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event SIGNEDFORAFFIRMATION_EVENT = new Event("SignedForAffirmation", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event COLLECTEDSIGNATURES_EVENT = new Event("CollectedSignatures", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event GASPRICECHANGED_EVENT = new Event("GasPriceChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event REQUIREDBLOCKCONFIRMATIONCHANGED_EVENT = new Event("RequiredBlockConfirmationChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected HomeAMB(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected HomeAMB(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected HomeAMB(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected HomeAMB(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Bytes32> transactionHash() {
        final Function function = new Function(FUNC_TRANSACTIONHASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> numMessagesSigned(Bytes32 _message) {
        final Function function = new Function(FUNC_NUMMESSAGESSIGNED, 
                Arrays.<Type>asList(_message), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<DynamicBytes> signature(Bytes32 _hash, Uint256 _index) {
        final Function function = new Function(FUNC_SIGNATURE, 
                Arrays.<Type>asList(_hash, _index), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(Uint256 _sourceChainId, Uint256 _destinationChainId, Address _validatorContract, Uint256 _maxGasPerTx, Uint256 _gasPrice, Uint256 _requiredBlockConfirmations, Address _owner) {
        final Function function = new Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(_sourceChainId, _destinationChainId, _validatorContract, _maxGasPerTx, _gasPrice, _requiredBlockConfirmations, _owner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> isInitialized() {
        final Function function = new Function(FUNC_ISINITIALIZED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> requiredBlockConfirmations() {
        final Function function = new Function(FUNC_REQUIREDBLOCKCONFIRMATIONS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> getMinimumGasUsage(DynamicBytes _data) {
        final Function function = new Function(FUNC_GETMINIMUMGASUSAGE, 
                Arrays.<Type>asList(_data), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> failedMessageReceiver(Bytes32 _messageId) {
        final Function function = new Function(FUNC_FAILEDMESSAGERECEIVER, 
                Arrays.<Type>asList(_messageId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bytes4> getBridgeMode() {
        final Function function = new Function(FUNC_GETBRIDGEMODE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes4>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setChainIds(Uint256 _sourceChainId, Uint256 _destinationChainId) {
        final Function function = new Function(
                FUNC_SETCHAINIDS, 
                Arrays.<Type>asList(_sourceChainId, _destinationChainId), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<DynamicBytes> message(Bytes32 _hash) {
        final Function function = new Function(FUNC_MESSAGE, 
                Arrays.<Type>asList(_hash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> failedMessageSender(Bytes32 _messageId) {
        final Function function = new Function(FUNC_FAILEDMESSAGESENDER, 
                Arrays.<Type>asList(_messageId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> submitSignature(DynamicBytes signature, DynamicBytes message) {
        final Function function = new Function(
                FUNC_SUBMITSIGNATURE, 
                Arrays.<Type>asList(signature, message), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bytes32> messageId() {
        final Function function = new Function(FUNC_MESSAGEID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> claimTokens(Address _token, Address _to) {
        final Function function = new Function(
                FUNC_CLAIMTOKENS, 
                Arrays.<Type>asList(_token, _to), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> numAffirmationsSigned(Bytes32 _hash) {
        final Function function = new Function(FUNC_NUMAFFIRMATIONSSIGNED, 
                Arrays.<Type>asList(_hash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> affirmationsSigned(Bytes32 _hash) {
        final Function function = new Function(FUNC_AFFIRMATIONSSIGNED, 
                Arrays.<Type>asList(_hash), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMaxGasPerTx(Uint256 _maxGasPerTx) {
        final Function function = new Function(
                FUNC_SETMAXGASPERTX, 
                Arrays.<Type>asList(_maxGasPerTx), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> requiredSignatures() {
        final Function function = new Function(FUNC_REQUIREDSIGNATURES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> messagesSigned(Bytes32 _message) {
        final Function function = new Function(FUNC_MESSAGESSIGNED, 
                Arrays.<Type>asList(_message), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> validatorContract() {
        final Function function = new Function(FUNC_VALIDATORCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> deployedAtBlock() {
        final Function function = new Function(FUNC_DEPLOYEDATBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple3<Uint64, Uint64, Uint64>> getBridgeInterfacesVersion() {
        final Function function = new Function(FUNC_GETBRIDGEINTERFACESVERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}, new TypeReference<Uint64>() {}));
        return new RemoteFunctionCall<Tuple3<Uint64, Uint64, Uint64>>(function,
                new Callable<Tuple3<Uint64, Uint64, Uint64>>() {
                    @Override
                    public Tuple3<Uint64, Uint64, Uint64> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Uint64, Uint64, Uint64>(
                                (Uint64) results.get(0), 
                                (Uint64) results.get(1), 
                                (Uint64) results.get(2));
                    }
                });
    }

    public RemoteFunctionCall<Uint256> messageSourceChainId() {
        final Function function = new Function(FUNC_MESSAGESOURCECHAINID, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRequiredBlockConfirmations(Uint256 _blockConfirmations) {
        final Function function = new Function(
                FUNC_SETREQUIREDBLOCKCONFIRMATIONS, 
                Arrays.<Type>asList(_blockConfirmations), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setGasPrice(Uint256 _gasPrice) {
        final Function function = new Function(
                FUNC_SETGASPRICE, 
                Arrays.<Type>asList(_gasPrice), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> messageCallStatus(Bytes32 _messageId) {
        final Function function = new Function(FUNC_MESSAGECALLSTATUS, 
                Arrays.<Type>asList(_messageId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> messageSender() {
        final Function function = new Function(FUNC_MESSAGESENDER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> requireToPassMessage(Address _contract, DynamicBytes _data, Uint256 _gas) {
        final Function function = new Function(
                FUNC_REQUIRETOPASSMESSAGE, 
                Arrays.<Type>asList(_contract, _data, _gas), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bytes32> failedMessageDataHash(Bytes32 _messageId) {
        final Function function = new Function(FUNC_FAILEDMESSAGEDATAHASH, 
                Arrays.<Type>asList(_messageId), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> maxGasPerTx() {
        final Function function = new Function(FUNC_MAXGASPERTX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> executeAffirmation(DynamicBytes message) {
        final Function function = new Function(
                FUNC_EXECUTEAFFIRMATION, 
                Arrays.<Type>asList(message), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(Address newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> gasPrice() {
        final Function function = new Function(FUNC_GASPRICE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> isAlreadyProcessed(Uint256 _number) {
        final Function function = new Function(FUNC_ISALREADYPROCESSED, 
                Arrays.<Type>asList(_number), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public List<UserRequestForSignatureEventResponse> getUserRequestForSignatureEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(USERREQUESTFORSIGNATURE_EVENT, transactionReceipt);
        ArrayList<UserRequestForSignatureEventResponse> responses = new ArrayList<UserRequestForSignatureEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UserRequestForSignatureEventResponse typedResponse = new UserRequestForSignatureEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.messageId = (Bytes32) eventValues.getIndexedValues().get(0);
            typedResponse.encodedData = (DynamicBytes) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UserRequestForSignatureEventResponse> userRequestForSignatureEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, UserRequestForSignatureEventResponse>() {
            @Override
            public UserRequestForSignatureEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(USERREQUESTFORSIGNATURE_EVENT, log);
                UserRequestForSignatureEventResponse typedResponse = new UserRequestForSignatureEventResponse();
                typedResponse.log = log;
                typedResponse.messageId = (Bytes32) eventValues.getIndexedValues().get(0);
                typedResponse.encodedData = (DynamicBytes) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<UserRequestForSignatureEventResponse> userRequestForSignatureEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(USERREQUESTFORSIGNATURE_EVENT));
        return userRequestForSignatureEventFlowable(filter);
    }

    public List<AffirmationCompletedEventResponse> getAffirmationCompletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(AFFIRMATIONCOMPLETED_EVENT, transactionReceipt);
        ArrayList<AffirmationCompletedEventResponse> responses = new ArrayList<AffirmationCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AffirmationCompletedEventResponse typedResponse = new AffirmationCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.sender = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.executor = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.messageId = (Bytes32) eventValues.getIndexedValues().get(2);
            typedResponse.status = (Bool) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AffirmationCompletedEventResponse> affirmationCompletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, AffirmationCompletedEventResponse>() {
            @Override
            public AffirmationCompletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(AFFIRMATIONCOMPLETED_EVENT, log);
                AffirmationCompletedEventResponse typedResponse = new AffirmationCompletedEventResponse();
                typedResponse.log = log;
                typedResponse.sender = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.executor = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.messageId = (Bytes32) eventValues.getIndexedValues().get(2);
                typedResponse.status = (Bool) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<AffirmationCompletedEventResponse> affirmationCompletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(AFFIRMATIONCOMPLETED_EVENT));
        return affirmationCompletedEventFlowable(filter);
    }

    public List<SignedForUserRequestEventResponse> getSignedForUserRequestEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNEDFORUSERREQUEST_EVENT, transactionReceipt);
        ArrayList<SignedForUserRequestEventResponse> responses = new ArrayList<SignedForUserRequestEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignedForUserRequestEventResponse typedResponse = new SignedForUserRequestEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.signer = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.messageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignedForUserRequestEventResponse> signedForUserRequestEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SignedForUserRequestEventResponse>() {
            @Override
            public SignedForUserRequestEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNEDFORUSERREQUEST_EVENT, log);
                SignedForUserRequestEventResponse typedResponse = new SignedForUserRequestEventResponse();
                typedResponse.log = log;
                typedResponse.signer = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.messageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<SignedForUserRequestEventResponse> signedForUserRequestEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNEDFORUSERREQUEST_EVENT));
        return signedForUserRequestEventFlowable(filter);
    }

    public List<SignedForAffirmationEventResponse> getSignedForAffirmationEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SIGNEDFORAFFIRMATION_EVENT, transactionReceipt);
        ArrayList<SignedForAffirmationEventResponse> responses = new ArrayList<SignedForAffirmationEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SignedForAffirmationEventResponse typedResponse = new SignedForAffirmationEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.signer = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.messageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SignedForAffirmationEventResponse> signedForAffirmationEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, SignedForAffirmationEventResponse>() {
            @Override
            public SignedForAffirmationEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SIGNEDFORAFFIRMATION_EVENT, log);
                SignedForAffirmationEventResponse typedResponse = new SignedForAffirmationEventResponse();
                typedResponse.log = log;
                typedResponse.signer = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.messageHash = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<SignedForAffirmationEventResponse> signedForAffirmationEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SIGNEDFORAFFIRMATION_EVENT));
        return signedForAffirmationEventFlowable(filter);
    }

    public List<CollectedSignaturesEventResponse> getCollectedSignaturesEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(COLLECTEDSIGNATURES_EVENT, transactionReceipt);
        ArrayList<CollectedSignaturesEventResponse> responses = new ArrayList<CollectedSignaturesEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CollectedSignaturesEventResponse typedResponse = new CollectedSignaturesEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.authorityResponsibleForRelay = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.messageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.NumberOfCollectedSignatures = (Uint256) eventValues.getNonIndexedValues().get(2);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CollectedSignaturesEventResponse> collectedSignaturesEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CollectedSignaturesEventResponse>() {
            @Override
            public CollectedSignaturesEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(COLLECTEDSIGNATURES_EVENT, log);
                CollectedSignaturesEventResponse typedResponse = new CollectedSignaturesEventResponse();
                typedResponse.log = log;
                typedResponse.authorityResponsibleForRelay = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.messageHash = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.NumberOfCollectedSignatures = (Uint256) eventValues.getNonIndexedValues().get(2);
                return typedResponse;
            }
        });
    }

    public Flowable<CollectedSignaturesEventResponse> collectedSignaturesEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(COLLECTEDSIGNATURES_EVENT));
        return collectedSignaturesEventFlowable(filter);
    }

    public List<GasPriceChangedEventResponse> getGasPriceChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(GASPRICECHANGED_EVENT, transactionReceipt);
        ArrayList<GasPriceChangedEventResponse> responses = new ArrayList<GasPriceChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            GasPriceChangedEventResponse typedResponse = new GasPriceChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.gasPrice = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<GasPriceChangedEventResponse> gasPriceChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, GasPriceChangedEventResponse>() {
            @Override
            public GasPriceChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(GASPRICECHANGED_EVENT, log);
                GasPriceChangedEventResponse typedResponse = new GasPriceChangedEventResponse();
                typedResponse.log = log;
                typedResponse.gasPrice = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<GasPriceChangedEventResponse> gasPriceChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(GASPRICECHANGED_EVENT));
        return gasPriceChangedEventFlowable(filter);
    }

    public List<RequiredBlockConfirmationChangedEventResponse> getRequiredBlockConfirmationChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REQUIREDBLOCKCONFIRMATIONCHANGED_EVENT, transactionReceipt);
        ArrayList<RequiredBlockConfirmationChangedEventResponse> responses = new ArrayList<RequiredBlockConfirmationChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RequiredBlockConfirmationChangedEventResponse typedResponse = new RequiredBlockConfirmationChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.requiredBlockConfirmations = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RequiredBlockConfirmationChangedEventResponse> requiredBlockConfirmationChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RequiredBlockConfirmationChangedEventResponse>() {
            @Override
            public RequiredBlockConfirmationChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REQUIREDBLOCKCONFIRMATIONCHANGED_EVENT, log);
                RequiredBlockConfirmationChangedEventResponse typedResponse = new RequiredBlockConfirmationChangedEventResponse();
                typedResponse.log = log;
                typedResponse.requiredBlockConfirmations = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<RequiredBlockConfirmationChangedEventResponse> requiredBlockConfirmationChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REQUIREDBLOCKCONFIRMATIONCHANGED_EVENT));
        return requiredBlockConfirmationChangedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getNonIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getNonIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    @Deprecated
    public static HomeAMB load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new HomeAMB(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static HomeAMB load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new HomeAMB(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static HomeAMB load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new HomeAMB(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static HomeAMB load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new HomeAMB(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<HomeAMB> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(HomeAMB.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<HomeAMB> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(HomeAMB.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<HomeAMB> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(HomeAMB.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<HomeAMB> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(HomeAMB.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class UserRequestForSignatureEventResponse extends BaseEventResponse {
        public Bytes32 messageId;

        public DynamicBytes encodedData;
    }

    public static class AffirmationCompletedEventResponse extends BaseEventResponse {
        public Address sender;

        public Address executor;

        public Bytes32 messageId;

        public Bool status;
    }

    public static class SignedForUserRequestEventResponse extends BaseEventResponse {
        public Address signer;

        public Bytes32 messageHash;
    }

    public static class SignedForAffirmationEventResponse extends BaseEventResponse {
        public Address signer;

        public Bytes32 messageHash;
    }

    public static class CollectedSignaturesEventResponse extends BaseEventResponse {
        public Address authorityResponsibleForRelay;

        public Bytes32 messageHash;

        public Uint256 NumberOfCollectedSignatures;
    }

    public static class GasPriceChangedEventResponse extends BaseEventResponse {
        public Uint256 gasPrice;
    }

    public static class RequiredBlockConfirmationChangedEventResponse extends BaseEventResponse {
        public Uint256 requiredBlockConfirmations;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public Address previousOwner;

        public Address newOwner;
    }
}
